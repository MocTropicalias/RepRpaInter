CREATE TABLE tb_usuario (
	pk_int_id_usuario SERIAL PRIMARY KEY,  
	text_foto VARCHAR(255),  
	var_email VARCHAR(100) NOT NULL CHECK (var_email ~ '^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'),
	var_senha VARCHAR(50) CHECK (LENGTH(var_senha) >= 8),
	var_user_name VARCHAR(50),  
	dt_nascimento DATE CHECK (dt_nascimento < CURRENT_DATE), 
	var_descricao_usuario VARCHAR(255),  
	var_cpf VARCHAR(11) CHECK (var_cpf ~ '^[0-9]{11}$'),
	var_nome VARCHAR(50),  
	createdAt DATE DEFAULT CURRENT_DATE, 
	deletedAt DATE,  
	fk_int_id_endereco INT,  
	updateAt DATE DEFAULT CURRENT_DATE
); 

CREATE TABLE tb_anuncio ( 
	var_nota_fiscal VARCHAR(255),  
	dt_data DATE,  
	num_valor FLOAT CHECK (num_valor > 0),
	var_produto VARCHAR(100),  
	int_quantidade INT CHECK (int_quantidade > 0),
	pk_int_id_anuncio SERIAL PRIMARY KEY,  
	var_status_venda VARCHAR(50),  
	deletedAt DATE,  
	createdAt DATE DEFAULT CURRENT_DATE,  
	fk_int_id_usuario INT,  
	updateAt DATE DEFAULT CURRENT_DATE 
); 

CREATE TABLE tb_endereco ( 
	var_cep VARCHAR(11) CHECK (var_cep ~ '^[0-9]{8}$'),  
	var_estado VARCHAR(50),  
	var_rua VARCHAR(250),  
	var_cidade VARCHAR(100),  	
	pk_int_id_endereco SERIAL PRIMARY KEY,  
	var_complemento VARCHAR(255),  
	int_num_casa INT CHECK (int_num_casa > 0), 
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	updateAt DATE DEFAULT CURRENT_DATE 
); 

CREATE TABLE tb_mascote ( 
	var_nome VARCHAR(50),  
	pk_int_id_mascote SERIAL PRIMARY KEY, 
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	fk_int_id_cor_mascote INT,  
	fk_int_id_usuario INT,  
	updateAt DATE DEFAULT CURRENT_DATE 
); 

CREATE TABLE tb_cor_mascote ( 
	pk_int_id_cor_mascote SERIAL PRIMARY KEY,  
	text_fundo VARCHAR(50),  
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	text_secundaria VARCHAR(50),  
	text_primaria VARCHAR(50),  
	updateAt DATE DEFAULT CURRENT_DATE
); 

CREATE TABLE tb_follow ( 
	pk_int_id_follow SERIAL PRIMARY KEY,  
	dt_data DATE,  
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	updateAt DATE DEFAULT CURRENT_DATE,  
	fk_int_id_seguidor INT,  
	fk_int_id_seguindo INT  
); 

CREATE TABLE tb_evento ( 
	dt_inicio DATE, 
	dt_final DATE,
	var_nome VARCHAR(100),  
	var_local VARCHAR(100),  
	num_preco_ticket FLOAT CHECK (num_preco_ticket >= 0),  
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	pk_int_id_evento SERIAL PRIMARY KEY,  
	fk_int_id_usuario INT,  
	updateAt DATE DEFAULT CURRENT_DATE
); 

CREATE TABLE tb_ticket ( 
	int_quant INT CHECK (int_quant > 0),  
	pk_int_id_ticket SERIAL PRIMARY KEY,  
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	fk_int_id_usuario INT,  
	fk_int_id_evento INT,  
	updateAt DATE DEFAULT CURRENT_DATE
); 

CREATE TABLE tb_venda_evento ( 
	pk_int_id_venda SERIAL PRIMARY KEY,  
	num_valor FLOAT CHECK (num_valor > 0), 
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	fk_int_id_barraca INT,  
	fk_int_id_usuario INT,  
	updateAt DATE DEFAULT CURRENT_DATE
); 

CREATE TABLE tb_barraca ( 
	pk_int_id_barraca SERIAL PRIMARY KEY,  
	var_nome VARCHAR(100),  
	createdAt DATE DEFAULT CURRENT_DATE,  
	deletedAt DATE,  
	fk_int_id_evento INT,  
	updateAt DATE DEFAULT CURRENT_DATE  
); 

ALTER TABLE tb_usuario ADD FOREIGN KEY(fk_int_id_endereco) REFERENCES tb_endereco (pk_int_id_endereco);
ALTER TABLE tb_anuncio ADD FOREIGN KEY(fk_int_id_usuario) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_mascote ADD FOREIGN KEY(fk_int_id_cor_mascote) REFERENCES tb_cor_mascote (pk_int_id_cor_mascote);
ALTER TABLE tb_mascote ADD FOREIGN KEY(fk_int_id_usuario) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_follow ADD FOREIGN KEY(fk_int_id_seguidor) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_follow ADD FOREIGN KEY(fk_int_id_seguindo) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_evento ADD FOREIGN KEY(fk_int_id_usuario) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_ticket ADD FOREIGN KEY(fk_int_id_usuario) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_ticket ADD FOREIGN KEY(fk_int_id_evento) REFERENCES tb_evento (pk_int_id_evento);
ALTER TABLE tb_venda_evento ADD FOREIGN KEY(fk_int_id_barraca) REFERENCES tb_barraca (pk_int_id_barraca);
ALTER TABLE tb_venda_evento ADD FOREIGN KEY(fk_int_id_usuario) REFERENCES tb_usuario (pk_int_id_usuario);
ALTER TABLE tb_barraca ADD FOREIGN KEY(fk_int_id_evento) REFERENCES tb_evento (pk_int_id_evento);